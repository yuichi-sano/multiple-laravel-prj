#!/usr/bin/env bash
BUNDLE_PATH=$(dirname `realpath $0`)
cd $BUNDLE_PATH
cd ../
if ! [ -x "$(command -v docker-compose)" ]; then
    shopt -s expand_aliases
    alias docker-compose='docker compose'
fi

UNAMEOUT="$(uname -s)"

WHITE='\033[1;37m'
NC='\033[0m'

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Laravel Sail supports macOS, Linux, and Windows (WSL2)." >&2

    exit 1
fi

# Source the ".env" file so Laravel's environment variables are available...
if [ -f ./bundle.env ]; then
    source ./bundle.env
fi

# Define environment variables...
export SERVICE1_APP_PORT=${SERVICE1_APP_PORT:5080}
export SERVICE1_APP_SERVICE=${SERVICE1_APP_SERVICE:-"sys-maintenance-tool"}
export DB_PORT=${DB_PORT:-3306}
export WWWUSER=${WWWUSER:-$UID}
export WWWGROUP=${WWWGROUP:-$(id -g)}

export SAIL_SHARE_DASHBOARD=${SAIL_SHARE_DASHBOARD:-4040}
export SAIL_SHARE_SERVER_HOST=${SAIL_SHARE_SERVER_HOST:-"laravel-sail.site"}
export SAIL_SHARE_SERVER_PORT=${SAIL_SHARE_SERVER_PORT:-8080}
export SAIL_SHARE_SUBDOMAIN=${SAIL_SHARE_SUBDOMAIN:-""}

# Function that outputs Sail is not running...
function sail_is_not_running {
    echo -e "${WHITE}Sail is not running.${NC}" >&2
    echo "" >&2
    echo -e "${WHITE}You may Sail using the following commands:${NC} './vendor/bin/sail up' or './vendor/bin/sail up -d'" >&2

    exit 1
}

if [ -z "$SAIL_SKIP_CHECKS" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo -e "${WHITE}Docker is not running.${NC}" >&2

        exit 1
    fi

    # Determine if Sail is currently up...
    PSRESULT="$(docker-compose ps -q)"
    if docker-compose ps | grep $APP_SERVICE | grep 'Exit'; then
        echo -e "${WHITE}Shutting down old Sail processes...${NC}" >&2

        docker-compose down > /dev/null 2>&1

        EXEC="no"
    elif [ -n "$PSRESULT" ]; then
        EXEC="yes"
    else
        EXEC="no"
    fi
else
    EXEC="yes"
fi

if [ $# -gt 0 ]; then

    # serviceコマンドが存在すればそちらを実行。引数は一個飛ばす

    if [ -e $BUNDLE_PATH/$1 ]; then
        cd $BUNDLE_PATH
        $BUNDLE_PATH/$1 ${@:2}
    # add service
    elif [ "$1" == "add_service" ]; then
        if [ "$2" == "add_service" ]; then
            echo "その名前はサービス名に使用できません"
            exit 1
        elif [ "$2" == "share" ]; then
            echo "その名前はサービス名に使用できません"
            exit 1
        fi
        cp $BUNDLE_PATH/template_script $BUNDLE_PATH/$2
        mkdir $2
        mkdir $2/api
        mkdir $2/client
        cd $2
        git clone https://github.com/yuichi-sano/ddd-laravel-doctrine.git api
        cd api
        sh ./setup_scripts/setup.sh $3 $2 $4
        rm -rf .git
        rm -f Vagrantfile
        rm -rf ./database/flyway
        mv ./docker-compose.yml $2.yml
        cd ..
        git clone https://github.com/yuichi-sano/simple-vue-cli.git client
        cd client
        rm -rf .git

    # Share the site...
    elif [ "$1" == "share" ]; then
        shift 1

        if [ "$EXEC" == "yes" ]; then
            docker run --init --rm -p $SAIL_SHARE_DASHBOARD:4040 -t beyondcodegmbh/expose-server:latest share http://host.docker.internal:"$APP_PORT" \
            --server-host="$SAIL_SHARE_SERVER_HOST" \
            --server-port="$SAIL_SHARE_SERVER_PORT" \
            --auth="$SAIL_SHARE_TOKEN" \
            --subdomain="$SAIL_SHARE_SUBDOMAIN" \
            "$@"
        else
            sail_is_not_running
        fi
    # Pass unknown commands to the "docker-compose" binary...
    else
        docker-compose "$@"
    fi
else
    docker-compose ps
fi
